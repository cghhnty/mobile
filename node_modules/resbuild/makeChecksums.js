var fs = require('fs');
var crypto = require('crypto');
var zlib = require('zlib');
var path = require('path');

module.exports = makeChecksums;

function makeChecksums(conf, opts) {
	if (!opts)
		opts = {};

	if (opts.base) {
		var oldCwd = process.cwd();
		process.chdir(opts.base);
	}

	checksums = {hash: {}, version: {}};

	if (conf.hash)
		makeChecksums.hash(conf.hash, checksums);

	if (conf.version)
		makeChecksums.version(conf.version, checksums);

	if (opts.base)
		process.chdir(oldCwd);

	var str = JSON.stringify(checksums);
	if (opts.type == 'js') {
		var data = new Buffer(opts.typeParam + '=' + str);
	} else if (opts.type == 'jsonp') {
		data = new Buffer(opts.typeParam + '(' + str + ')');
	} else {
		data = new Buffer(str);
	}

	var meta = {
		checksum: crypto.createHash('md5').update(data).digest('hex')
	};

	if (opts.output) {
		try {
			var oldMeta = JSON.parse(fs.readFileSync(opts.output + '.meta', 'utf8'));
		} catch (e) {}

		if (!oldMeta || oldMeta.checksum != meta.checksum) {
			console.log('make checksum list');
			fs.writeFileSync(opts.output, data);
			fs.writeFileSync(opts.output + '.meta', JSON.stringify(meta));
			fs.writeFileSync(opts.output + '.noclean', '');
			zlib.gzip(data, function(err, buf) {
				fs.writeFileSync(opts.output + '.gz', buf);
			});
		}
	}

	return {
		checksums: checksums,
		data: data,
		dataChecksum: meta.checksum
	};
}

makeChecksums.hash = function(files, checksums) {
	for (var i = 0; i < files.length; i++) {
		var file = files[i];
		try {
			var stats = fs.statSync(file);
		} catch (e) {
			console.error(e);
			return false;
		}

		if (stats.isDirectory()) {
			var _files = fs.readdirSync(file).map(function(filename) {
				return file + '/' + filename;
			});

			if (!makeChecksums.hash(_files, checksums))
				return false;
		} else {
			var extname = path.extname(file).slice(1);
			if (extname in {map: 1, gz: 1, meta: 1})
				continue;

			var data = fs.readFileSync(file);
			checksums.hash[file] = crypto.createHash('md5').update(data).digest('hex');
		}
	}
	return checksums;
};

makeChecksums.version = function(dirs, checksums) {
	for (var i = dirs.length - 1; i >= 0; i--) {
		var dir = dirs[i];
		checksums.version[dir] = {};
		var _files = fs.readdirSync(dir).map(function(filename) {
			var split = filename.lastIndexOf('-');
			var lib = filename.slice(0, split);
			var ver = filename.slice(split + 1);
			checksums.version[dir][lib] = ver;
		});
	}
	return checksums;
};
